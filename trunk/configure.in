AC_INIT(src/GameInit.cpp)

AC_CANONICAL_TARGET()
AM_INIT_AUTOMAKE(xmoto,0.4.3)
AC_GNU_SOURCE

AC_PROG_CXX
AC_PROG_CPP
AC_PROG_INSTALL

dnl endianness
AC_C_BIGENDIAN(AC_DEFINE([XMOTO_BIG_ENDIAN]),
AC_DEFINE([XMOTO_LITTLE_ENDIAN]))

dnl sqlite
AC_CHECK_HEADERS([sqlite3.h],[SQLITE_LIBS=-lsqlite3],[AC_MSG_ERROR("sqlite3 required")])
AC_CHECK_LIB(sqlite3, main,[],[AC_MSG_ERROR("Linking against sqlite3 failed.")])
AC_SUBST(SQLITE_LIBS)

dnl libz before png
AC_CHECK_LIB(z, uncompress, [], [AC_MSG_ERROR(zlib required)])
AC_CHECK_LIB(jpeg, jpeg_CreateCompress, [], [AC_MSG_ERROR(libjpeg required)])
AC_CHECK_LIB(png, png_read_image, [], [AC_MSG_ERROR(libpng required)])

if test "$target_os" != "mingw32" # on windows, don't include libbz2
then
  AC_CHECK_LIB(bz2, BZ2_bzReadOpen, [], [AC_MSG_ERROR(libbz2 required)])
fi

# on windows, don't check ; on mac, it's included into the framework
if test "$target_os" != "mingw32" -a "$with_apple_opengl_framework" != "yes"
then
  AC_CHECK_LIB(GLU, gluBuild2DMipmaps, [], [AC_MSG_ERROR(glu required)])
fi

if test "$target_os" = "mingw32" # others libraries required by mingw32
then
  MINGW32_LIBS="-lmingw32 -lSDLmain -lSDL -lopengl32 -lglu32 -mwindows -luserenv -lintl -lSDL_ttf -lSDL_mixer -lode xmoto_icone.o" # -mwindows to avoid dos window
  # -MD is for gettext (see gettext faq)
  CXXFLAGS="$CXXFLAGS"" -mthreads -MD"
  AC_SUBST([MINGW32_LIBS])
fi
AM_CONDITIONAL([WIN32], test "$target_os" = "mingw32")

if test "$target_os" != "mingw32"
then
  AM_PATH_SDL(1.0.0, [], [AC_MSG_ERROR(SDL required)])
  AC_SDL_CHECK_LIB(SDL_mixer, Mix_OpenAudio, [], [AC_MSG_ERROR(SDL_mixer required)])

  dnl sdl_ttf
  #AC_CHECK_HEADERS([SDL/SDL_ttf.h],[],[AC_MSG_ERROR(SDL_ttf headers required)])
  AC_SDL_CHECK_LIB(SDL_ttf, TTF_OpenFont, [], [AC_MSG_ERROR(SDL_ttf lib required)])
fi

dnl openGl
AC_ARG_WITH([renderer-openGl],
  [AS_HELP_STRING([--with-renderer-openGl=0|1],
    [RendererOpenGl])],
  [USE_OPENGL="$withval"],
  [USE_OPENGL="1"]
)
AC_SUBST([USE_OPENGL])

if test "$USE_OPENGL" = "1"
then
  AX_CHECK_GL()
fi
AM_CONDITIONAL([USE_OPENGL], test "$USE_OPENGL" = "1")

dnl sdlGfx
AC_ARG_WITH([renderer-sdlGfx],
  [AS_HELP_STRING([--with-renderer-sdlGfx=0|1],
    [RendererSdlGfx])],
  [USE_SDLGFX="$withval"],
  [USE_SDLGFX="0"]
)
AC_SUBST([USE_SDLGFX])

if test "$USE_SDLGFX" = "1"
then
  AC_SDL_CHECK_LIB(SDL_gfx, pixelColor, [], [AC_MSG_ERROR(SDL_gfx required)])
fi
AM_CONDITIONAL([USE_SDLGFX], test "$USE_SDLGFX" = "1")

AC_SEARCH_LIBS(lua_pushboolean,lua lua5.1 lua50, [], [AC_MSG_ERROR(liblua5.1, liblua50, or liblua required)])
AC_SEARCH_LIBS(luaopen_math,lualib lualib5.1 lualib50, [], [AC_MSG_ERROR(liblualib5.1, liblualib50, or liblualib required)])

dnl ***** Check lua headers, as they are prone to be located random places on random systems! *****
dnl The following three lines where suggested by Eric Piel, but they don't seem to work on my system
dnl AC_CHECK_HEADERS(lua.h lua/lua.h lua50/lua.h, [break], [AC_MSG_ERROR(Could not find lua.h)])
dnl AC_CHECK_HEADERS(lauxlib.h lua/lauxlib.h lua50/lauxlib.h, [break], [AC_MSG_ERROR(Could not find luaxlib.h)])
dnl AC_CHECK_HEADERS(lualib.h lua/lualib.h lua50/lualib.h, [break], [AC_MSG_ERROR(Could not find lualib.h)])

dnl search in this order to put in USE_LUA_VERSION the recenter version
dnl in .h inclusion, order is reversed to include the recenter version
USE_LUA_VERSION="unknown"
AC_CHECK_HEADER(lua.h,        AC_DEFINE(HAVE_LUA_H)       [USE_LUA_VERSION="unknown"])
AC_CHECK_HEADER(lua/lua.h,    AC_DEFINE(HAVE_LUA_LUA_H)   [USE_LUA_VERSION="unknown"])
AC_CHECK_HEADER(lua50/lua.h,  AC_DEFINE(HAVE_LUA50_LUA_H) [USE_LUA_VERSION="5.0"])
AC_CHECK_HEADER(lua51/lua.h,  AC_DEFINE(HAVE_LUA51_LUA_H) [USE_LUA_VERSION="5.1"])
AC_CHECK_HEADER(lua5.1/lua.h, AC_DEFINE(HAVE_LUA5_1_LUA_H)[USE_LUA_VERSION="5.1"])

AC_LANG_PUSH([C++])

if test "$target_os" != "mingw32" # make me crazy to detect it because it compiles
then
  AC_SEARCH_LIBS(dJointAttach,ode, [], [AC_MSG_ERROR(libode required)], -lstdc++)
fi

AC_LANG_POP()

AC_CHECK_LIB(curl, curl_easy_init,[],[AC_MSG_ERROR(libcurl required)])

ALL_LINGUAS="fr_FR de_DE es_ES ca_ES sk_SK nb_NO nn_NO fi_FI pl_PL ru_RU it_IT sv_SE cs_CZ pt_BR pt_PT lv_LV da_DK"
AM_GNU_GETTEXT()

dnl Put LOCALESDIR in makefiles
AC_ARG_WITH([localesdir],
  [AS_HELP_STRING([--with-localesdir=DIR],
    [Override the default directory for locales])],
  [LOCALESDIR="$withval"],
  [LOCALESDIR="$localedir"]
)
if test "$target_os" = "mingw32"
then
  LOCALESDIR="locale"
fi
AC_SUBST([LOCALESDIR])

dnl Put GAMEDATADIR in makefiles
AC_ARG_WITH([gamedatadir],
  [AS_HELP_STRING([--with-gamedatadir=DIR],
    [Override the default directory for game data])],
  [GAMEDATADIR="$withval"],
  [GAMEDATADIR="$datadir/$PACKAGE"]
)
AC_SUBST([GAMEDATADIR])

dnl Put ALLOW_ZOOMING in makefiles
AC_ARG_WITH([enable-zoom],
  [AS_HELP_STRING([--with-enable-zoom=0|1],
    [Enable zoom])],
  [ALLOW_ZOOMING="$withval"],
  [ALLOW_ZOOMING="0"]
)
AC_SUBST([ALLOW_ZOOMING])

dnl asian font
if test "$target_os" = "mingw32" # windows...
then
  DEFAULT_ASIAN_TTF_FILE="Textures/Fonts/bkai00mp.ttf"
else
  DEFAULT_ASIAN_TTF_FILE="/usr/share/fonts/truetype/arphic/bkai00mp.ttf"
fi

AC_ARG_WITH([asian-ttf-file],
  [AS_HELP_STRING([--with-asian-ttf-file=],
    [Asian ttf file])],
  [ASIAN_TTF_FILE="$withval"],
  [ASIAN_TTF_FILE="$DEFAULT_ASIAN_TTF_FILE"]
)
AC_SUBST([ASIAN_TTF_FILE])

dnl Can't build xmoto.bin if we're cross-compiling
AM_CONDITIONAL(CROSS_COMPILING,test "$cross_compiling" = yes)

AC_OUTPUT(Makefile bin/Makefile po/Makefile.in src/Makefile extra/Makefile intl/Makefile)

# display is something is missing
displayRequirement() {
  STUFF="$1"
  VAR="$2"
  GOOD_RES="$3"
  REQ="$4"

  if test "$VAR" = "$GOOD_RES"; then
    printf "| %15s | %10s | %51s |\n" "$STUFF" "enabled" "(""$REQ"")"
  else
    printf "| %15s | %10s | %51s |\n" "$STUFF" "disabled" "(""$REQ"" missing)"
  fi
}

displayVersion() {
  LIB="$1"
  VERSION="$2"
  printf "| %15s | %10s | %51s |\n" "$LIB" "enabled" "$VERSION"
}

use_gettext=no
if test "$gt_cv_func_gnugettext1_libc" = "yes"
then
  use_gettext="yes"
fi
if test "$gt_cv_func_gnugettext1_libintl" = "yes"
then
  use_gettext="yes"
fi

echo
echo   "+-----------------+------------+-----------------------------------------------------+"
displayRequirement "Locales" "$use_gettext" "yes" "gettext"
echo   "+-----------------+------------+-----------------------------------------------------+"
displayRequirement "asian ttf file" "$ASIAN_TTF_FILE" "$ASIAN_TTF_FILE" "$ASIAN_TTF_FILE"
echo   "+-----------------+------------+-----------------------------------------------------+"
displayVersion "Lua" "$USE_LUA_VERSION"
echo   "+-----------------+------------+-----------------------------------------------------+"
displayRequirement "Zoom" "$with_enable_zoom" "1" "--with-enable-zoom=1 (for non official packages)"
echo   "+-----------------+------------+-----------------------------------------------------+"
displayRequirement "OpenGl" "$USE_OPENGL" "1" "--with-renderer-openGl=1"
echo   "+-----------------+------------+-----------------------------------------------------+"
displayRequirement "sdlGfx" "$USE_SDLGFX" "1" "--with-renderer-sdlGfx=1 (unsafe)"
echo   "+-----------------+------------+-----------------------------------------------------+"

echo "target os: ""$target_os"
